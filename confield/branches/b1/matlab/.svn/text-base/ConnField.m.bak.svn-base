function res = ConnField(snr, maxSAIterCount)

F = 0.2; % frequency of sin wave
mu = 800;
fs = 1; % sampling frequency.
D = 300;    % number of time points sampled.
N = 100;    % number of all time course.
M = 20;     % number of sin wave signals.
label = zeros(N, 1);
label(1:M/2) = 1; label(N/2+1:N/2+M/2) = 1;
A = 20;
%snr = 2;
if exist('sinSample.mat', 'file') == 2
    dataSaved = load('sinSample.mat');
    if snr == dataSaved.snr
        X = dataSaved.X;
        C = dataSaved.C;
        fprintf('load existing data file.\n');
    else
        [X, C] = GenTimeSeries(F, mu, fs, D, N, label, A, snr);
        save sinSample X C snr;
        fprintf('Generate new data file.\n');
    end;
else
    [X, C] = GenTimeSeries(F, mu, fs, D, N, label, A, snr);
    save sinSample X C snr;
    fprintf('Generate new data file.\n');
end
R = corr(X');
figure(1);
imshow(R/2+0.5, 'InitialMagnification', 'fit');
title('Sample Correlation. Scaled to (0,1)');
saveas(1, 'figures/SampleCorr.eps', 'eps');
B = (N*N-N)/200; % bin number.
figure(2);
sel = logical(ones(N,N) - diag(ones(N,1)));
hist(R(sel),B);
title('Sample correlation Histogram'); 
saveas(2, 'figures/CorrHist.eps', 'eps');
EMPost(R, maxSAIterCount);

function [X, C] = GenTimeSeries(F, mu, fs, D, N, label, A, snr)
% Generate time series signal.
% F: frequency of the time series. I assume this is mu + sine wave + noise.
% mu: mean of the signal.
% fs: sampling frequency.
% D: number of time points.
% N: total number of time series, including sine signal and constant
% signal.
% label: Nx1 vector. Each element is 1 for sigmal, 0 for noise.
% snr: signal to noise ratio. Defined as A/sigma^2.
%
% output: 
% X: NxD data matrix. Each row is time course.
% C: true connectivity matrix. c_ij is the theoretical correlation
% coefficient between point i and j.
M = sum(label); % # of sin wave signal data points.
ts = 1/fs;
T = (1:D)*ts;
X = zeros(N, D);
sigma2 = A/snr;

X(label==1, :) = repmat(A*sin(2*pi*F*T), M, 1);
X = X + sigma2* randn(N, D) + ones(N, D) * mu;
C = label * label';
figure(21); imshow(C, 'InitialMagnification', 'fit');
title('Ground truth Connectivity Map.');
pause(0.1);
saveas(gcf, 'figures/trueConn.eps', 'eps');
close(21);


% Visualize data just for fun.
SF = (A + 3*sqrt(sigma2))*2;
figure(21); hold on;
for i = 1:min([N, 30, M])
    Y = (X(i,:) - mu)/SF + i;
    plot(Y);
end;
title(strcat('Simulated time series. Total time series #:', int2str(N)));
pause(0.1);
saveas(gcf, 'figures/1DTimeSeries.eps', 'eps'); close(21);
fprintf('Signal: %d-- %d, %d -- %d\n', 1, M/2, 1+N/2, N/2+M/2);

function res = EMPost(R, maxSAIterCount)
% Given sample correlation matrix R,
% compute the posterior matrix C, where c_ij = p(c_ij|r_ij).

        
% init model parameters.
mu = [0 0.5]; % Bold guess. mu(1) is mean for noconnectivity.
sigma2 = [0.2 0.2]; % when A^2/sigma^2 is 10. Roughly guess.


% initialize
N = size(R, 1); % number of voxels.
C = zeros(N,N); % Connectvity matri. Cij = {-1, 1}
coor = randperm(N*N);
gc = 1./(sqrt(2*pi*sigma2)); % Gaussian constant.
for n = 1:N*N
    pos = coor(n);
    [i,j] = ind2sub([N N], pos);    
    if i < j
        lhood(2) = gc(2) * exp(-(R(i,j)-mu(2))^2/(2*sigma2(2)));
        lhood(1) = gc(1) * exp(-(R(i,j)-mu(1))^2/(2*sigma2(1)));
        if lhood(2) > lhood(1)
            C(i,j) = 1;
        else
            C(i,j) = -1;
        end;
    end;
end;
C = triu(C,1) + triu(C,1)' + diag(ones(N,1));


T = 5; % Annealing temperature.
beta = 1/T;
%maxIterCount = 20;
%maxSAIterCount = 40;
iterCount = 1;
para = [mu, sigma2]; % all parameters.
allPost = zeros(N, N, 2);
allBeta = beta;
change = inf;
while(change > 10^(-5))
    % E step. Compute posterior probability.
    SAIterCount = 1;
    while(SAIterCount <= maxSAIterCount)
        gc = 1./(sqrt(2*pi*sigma2)); % Gaussian constant.
        coor = randperm(N*N);
        for n = 1:N*N
            pos = coor(n);
            [i,j] = ind2sub([N N], pos);
            if i < j
                neighbors = pos + [-1 1 -N N];
                neighbors([i==1, i==N|i==j-1, j==1|i==j-1, j==N]) = [];
                nsum = sum(C(neighbors));
                denom = 2*cosh(beta*nsum);
                pr(1) = exp(beta*(-1)*nsum)/denom;
                pr(2) = exp(beta*(+1)*nsum)/denom;
                % Likelihood.
                lhood(2) = gc(2) * exp(-(R(i,j)-mu(2))^2/(2*sigma2(2)));
                lhood(1) = gc(1) * exp(-(R(i,j)-mu(1))^2/(2*sigma2(1)));
                % Posterior.
                post(1) = pr(1) * lhood(1);
                post(2) = pr(2) * lhood(2);
                % Normalize so they sum to one.
                post = post/sum(post);
                % we dont' sample from posterior. Instead we compute the
                % expected value. Mean field theory.
                C(i,j) = post(2) - post(1) ;
                % In last iteration the field is stable (equililbrium), so
                % we save posterior for estimating parameters.
                if SAIterCount == maxSAIterCount
                    allPost(i,j,:) = post;
                end;
            end;
           
        end;
        % fill another part of the symmetric matrix.
        C = triu(C,1) + triu(C,1)' + diag(diag(C));
        if SAIterCount == maxSAIterCount
            allPost(:,:,1) = triu(allPost(:,:,1),1) + triu(allPost(:,:,1),1)';
            allPost(:,:,2) = triu(allPost(:,:,2),1) + triu(allPost(:,:,2),1)'...
                +diag(ones(N,1));
        end;
        fprintf('EM iteration: %d. SA iteration: %d\n'...
            , iterCount, SAIterCount);
        % show connectivity map.
        figure(1); imshow((C+1)*0.5, 'InitialMagnification', 'fit'); 
        title(strcat('Posterior Connectivity'));
        if SAIterCount == maxSAIterCount
            figure(11); imshow(allPost(:,:,1));
            title('Posterior map for C = 0 (no connectivity)');
            figure(12); imshow(allPost(:,:,2));
            title('Posterior map for C = 1 (have connectivity)');
            pause(0.01);
        end;
        SAIterCount = SAIterCount + 1;
    end;

    % M step. estimate parameters.
    % # of c = 0 in triangular matrix.
    Nk(1) = sum(sum(allPost(:,:,1))) - sum(diag(allPost(:,:,1)));
    Nk(2) = sum(sum(allPost(:,:,2))) - sum(diag(allPost(:,:,2))); % c = 1
    % mu(1) = 0. No change. 
    CR = allPost(:,:,2) .* R;
    CR = CR - diag(diag(CR));
    mu(2) = sum(CR(:))/Nk(2);
    
    RM1 = allPost(:,:,1) .* (R - mu(1)).^2; 
    RM1 = RM1 - diag(diag(RM1)); % remove diag elements -- useless.
    RM2 = allPost(:,:,2) .* (R - mu(2)).^2; 
    RM2 = RM2 - diag(diag(RM2));
    sigma2(1) = sum(RM1(:))/Nk(1);
    sigma2(2) = sum(RM2(:))/Nk(2); 
    
    % Estimate beta. This need a lot of work. We begin with previous beta
    % as a init value for Newton's method.

    epsilon = 10^(-6);
    step = inf;
    if beta < 15
        
        while (step > epsilon)
            J = 0; DELL =0 ;
            for n = 1:N*N
                [i,j] = ind2sub([N N], n);
                if i < j
                    neighbors = n + [-1 1 -N N];
                    neighbors([i==1, i==N|i==j-1, j==1|i==j-1, j==N]) = [];
                    nsum = sum(C(neighbors));
                    J = J + nsum^2 * (tanh(beta*nsum)^2 - 1);
                    DELL = DELL + nsum*(C(i,j) - tanh(beta*nsum));
                end;
            end;
            step = -DELL/J;
            beta = beta + step;
            fprintf('step = %d, new beta = %2.2f\n', step, beta);
            allBeta = [allBeta; beta];
            figure(2);
            plot(allBeta, 'ro-');
            title('Estimation of beta');
        end;
    else
        fprintf('beta is already very large. Unchanged.\n');
    end;
    
    % show the histogram.
    sel = C < 0;
    sel = logical(sel - diag(diag(sel)));
    R0 = R(sel);
    sel = C > 0;
    sel = logical(sel - diag(diag(sel)));
    R1 = R(sel);

    figure(3);
    hist(R0, Nk(1)/200);
    title('sample correlation given c = 0');
    figure (4); hist(R1, Nk(2)/20);
    title('sample correlation given c = 1');
    %z0 = 0.5 * log((1+R0)./(1-R0));
    %z1 = 0.5 * log((1+R1)./(1-R1));
    %figure(104);    hist(z0(~isinf(z0)), N0/200);
    %title('Fisher transformed correlation given c = 0');
    %figure(105);  hist(z1(~isinf(z1)), N1/20);
    %title('Fisher transformed correlation given c = 1');
    
    % save parameters and dispaly the trend.
    para = [para; [mu, sigma2]];
    change = sum(abs(para(end,:) - para(end-1,:))); % if change big, continue.
    Xcoord = 1:iterCount+1;
    figure(5);
    plot(Xcoord, para(:,1), 'bo-',...
        Xcoord, para(:,2), 'ro-',...
        Xcoord, para(:,3), 'b*--',...
        Xcoord, para(:,4),  'r*--');
    title('trend of parameters in EM iteration.');
    xlabel('EM iteration');
    legend('mu0', 'mu1', 'sgima^2 0', 'sigma^2 1');
    
    fprintf('iteration: %d\n', iterCount);
    iterCount = iterCount +1;
        
end;
